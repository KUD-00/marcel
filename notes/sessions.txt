Keep track of multiple histories


What happens when there are concurrent sessions. Does one exiting
overwrite history from another?

Merge them all into one history?

If multiple histories are tracked, how to select one on startup?

Bash:

- history read at startup

- Changes tracked and written on exit. (Or maybe the whole history
  including changes from this console). But there isn't an
  overwrite. So on exit, the history must be read again, and local
  changes appended?

Generalizing this: Keep track of sessions:

- A session has its own history.

- Vars are scoped to the session, and restarting a session brings back
  those vars and their values.

- Disallow multiple concurrent uses of a session?

- Support session upload and download.

- I guess sessions need names, or some way to refer to
  them. E.g. start marcel with session foobar. If no session
  specified, then:

  - vars not preserved?
  - what happens to history on exit?

- Stream-valued vars can be large (on disk). Provide a way to manage
  them.

From https://github.com/geophile/marcel/issues/6:

    - Ability to hibernate (save context, close, and open it back again)

Exactly, that's a session.
    
    - Ability to store multiple result buffers (aka output of previous commands).

    - Ability to access the stored buffers and run processing functions on
      them (e.g. I take a snapshot of counters and after a while another
      snapshot - can I see the diff?)

Idea: Store results of previous commands automatically, (results would
be BEFORE an implicit write). Be able to recall these, based on this
history mechanism.


----------------------------------------------------------------------

Wait a minute. Why is automatically storing every command output a
good idea? It's already easy enough to store wanted results in a
variable, and then, with sessions, persist those variables.

With everything stored, there's a lot to wade through, and cleaning
up, being selective about what's kept is labor intensive. Too easy to
accidentally delete something, too easy to be cautious and keep
everything, and then it's difficult to find what you want. Also
EVERYTHING is kept. Common shell usage is to refine commands until
they work properly. Just save the final, correct version.

Infinite output problem iss avoided. It should be pretty obvious that
"timer 1 ... > var" is a bad idea.

----------------------------------------------------------------------
    

Possible rules on session usage:

- A session can be used by at most one marcel instance at a time.

- Starting an anonymous session (no session selected) creates a new
  one. Resuming a session blocks anyone else from resuming the same
  session, (attempt results in error message and exit).

- Exiting anonymous session:

  - Present option to name it (don't allow duplicate names).

  - If declined, then save anyway with some identifying information?
    Or just delete it? Could save it with some descriptive information
    (e.g. start/end timestamps) to allow it to be located later.

- Exiting named session: No user input required.

- Allow for session rename



How is a named session deleted? Need session commands. Can only delete
one session while it is not in use, and from some other session.



Session management:

- List sessions: name, size

- Delete session

- Duplicate session, giving duplicate a new name

- Start marcel with a named session. Problem: If you can't remember
  the name, you would need to start marcel to find out the name.

- Switch sessions? That solves the forgotten name problem: Start anon,
  select a session. Switching to it ends the anon session. But then do
  we need all the end-of-anon session stuff?

- Prune session, deleting some subset of saved results. By time? By
  size? User-selected? Or have the user identify what to keep?

- Session state:

  - In /var/lib/marcel, owned by root? Maybe, but it's per-user
    state. Could also go to .local/share/marcel. But it's potentially
    a lot of space. Allow for user control.

  - Need to enforce a max, in case of commands that never end, e.g. "timer 1 | ..."


----------------------------------------------------------------------

On disk:

Each session has its own startup?

.local/share/marcel/
    startup.py  # For anon sessions, and template for named sessions
    SESSION_NAME/
        startup.py
        session.p  # Session properties (pickled)
        env.p: Pickled environment
        history

Should session.p omit session name? If it's included, then that
creates an opportunity for a discrepancy, in case of a manual rename
of the SESSION_NAME directory. And a session rename command gets more
complicated.

----------------------------------------------------------------------

session 

- use NAME

  - use session with given NAME.

  - close existing session

- close

  - close current session

  - If anonymous: save with a new name? discard?

- list

  - list all sessions
    - name
    - create timestamp
    - last saved timestamp
    - size on disk

- properties:

  - name
  - startup file
  - create timestamp
  - last save timestamp
  - max size on disk
  - max size on disk for a single command output
