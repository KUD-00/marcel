What should be tab-completed?

- Op names

- Flags?

- Expected args? Basically, turning tab completion into help facility.

- cd: directories

- ls: files, symlinks, directories

----------------------------------------------------------------------

bash:

- Does command completion

- Does file completion for current directory only (with no
  input). Then, it looks for completions of what's been typed.

- "ls -" does flag completion (just listing them, no help). Long versions only.

- file completion seems to be done for all commands, even when it
  doesn't make sense (e.g. ps)

- ps doesn't do flag completion.

----------------------------------------------------------------------

General command completion:

For an op: set of op names.

After op:

      -: list flags for the op
      
      other: for an op expecting filenames: Contents of pwd, and /

Parser state and op are needed.

----------------------------------------------------------------------

Bug 98: Autocomplete doesn't work in pipeline

    l<tab>
    load  loop  ls 

    ls | args [l<tab>

doesn't show any options.

Time for an overhaul of tab completion. The tracking of the last token
(CurrentOp class) by parsing for tab completion was only accidentally
working for non-nested pipelines, and broken for nested ones. And not
readily fixable. The problem is that once the parse is past a token,
the relevant CurrentOp is popped and no longer available. So in the
case of l<tab>, the CurrentOp is args (because we're completely done
with "l"). In the first case above that "worked", (no nested pipeline)
there was a bug in which "l" was on the stack after popping "l" from
the stack!

Parser state:

- tokens: List of Token
- t: index into tokens, next token to process.
- token: The current token, tokens[t-1] 
- current_pipelines: Stack of Pipelines

Tab completion sees tokens, a token may be:

- an op: ls
- a partially-typed op: l
- a flag or any prefix: -, --, -x, --xy, -xyz
- A string arg: abc, 'abc', "abc", a\ bc
- an expression: (...)
- punctuation: |, >, >>, !, !!, [, ], (, ), @, =, #, <comma>, :

It CANNOT be:

- a partial expression: (.... An exception should be thrown if we run
  out of text before the expression is complete.

Parse can also end with an exception


Tab completion needs to know:

- context: is text an op or partial op? arg? 

- whether text is current token or previous one (e.g. expr that
  couldn't be parsed).

Observations:

l<tab>:         text=<l>, token=String(l)

ls<tab>:        text=<ls>, token=Op(ls)

ls <tab>:       text=<>, token=Op(ls)

ls (<tab>:      text=<>, token=

   Parser() blows up in Lexer, and is uncaught by TabCompleter.candidates!

ls -<tab>:      text=<->, token=String(-)

ls |<tab>:      text=<>, token=Pipe(|), KCE (premature end)

ls | args [<tab>:        text=<>, token=Begin([), KCE (premature end)

......................................................................

ls<tab>:        Do op completion.
ls <tab>:       Op is complete. Do filename completion.

The problem is that the parse doesn't see whitespace. Lexer can help,
adding info to Tokens, e.g. Token.adjacent_to_previous.

======================================================================

Tab completion bugs:

----------------------------------------------------------------------

128. Tab completion vs. syntactic sugar

For "var > ..." or "./file > ...", tab completion doesn't work. Tab
completion for first symbol expects executable.

----------------------------------------------------------------------

147. Space after tab-completion is broken

Sometimes there's a space when there shouldn't be, and vice versa.

Check ops, args, filenames.

