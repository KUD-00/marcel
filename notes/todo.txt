- Complete Python string parsing

- Complete shell string parsing (termination on things other than EOL
  and whiteapce).

- Debugging & verbosity level

----------------------------------------------------------------------

- Organize internal ops -- Fork, LabelThread

- How do exit codes fit in?

----------------------------------------------------------------------

Provide a way to specify farcel config path. Maybe as a property of
the cluster.

----------------------------------------------------------------------

Distinct color for broken symlink.

----------------------------------------------------------------------

Tab completion:

- Tab completion for command should distinguish between first op of
  pipeline and subsequent ones. I.e., only show those ops that can be
  used in the current position within the pipeline.

----------------------------------------------------------------------

Add notion of current job, and then allow bg/fg ops to omit args.

----------------------------------------------------------------------

Would multiprocessing.Process provide better streaming than
subprocess.Popen? I.e., not waiting for op to complete.

----------------------------------------------------------------------

Should help output go through more?

----------------------------------------------------------------------

Configuration:

- Look in ~, /etc/marcel.

- Be able to specify config file (or multiple locations) in startup.

----------------------------------------------------------------------

History commands

- If history were in the namespace, then edited_command wouldn't need
  special handling.

----------------------------------------------------------------------

Not all ops can be used in API, e.g. edit, help. What about fork? remote?

----------------------------------------------------------------------

API needs documentation. help? HTML?

----------------------------------------------------------------------

Exit codes? (Not just an api issue)

----------------------------------------------------------------------

window: what is supposed to happen if overlap = 0? disjoint = 0? Not tested.
test types other than int

----------------------------------------------------------------------

sudo has a zillion args. How to express this on sudo()? **kwargs?

----------------------------------------------------------------------

first constructs an Exception out of an Error.

Is it feasible to have Error carry the original exception, and reraise
it, or at least an exception of the same type? What if the Error was
remote?

----------------------------------------------------------------------

ls spacing is too wide. How to pick a width? Buffer results? Don't
buffer and adapt?

----------------------------------------------------------------------

This is broken: Op.op_name() evalutes to "op".

    @staticmethod
    def check_arg(ok, arg, message):
        if not ok:
            cause = (f'Incorrect usage of {Op.op_name()}: {message}'
                     if arg is None else
                     f'Incorrect value for {arg} argument of {Op.op_name()}: {message}')
            raise marcel.exception.KillCommandException(cause)

----------------------------------------------------------------------

ps lines are often long enough to wrap. Should render_full leave off
args? If so, then provide an args method.

----------------------------------------------------------------------

What if there are two shells running at the same time -- how is
history file maintained? Probably lose updates from the first one to
exit. How should this be handled? To be safe, on exit, should read,
append, write. Atomically.

----------------------------------------------------------------------

Should jobs and commands be objects? That would allow for better
formatting.

----------------------------------------------------------------------

Should {...} work as a glob pattern? It does in bash. pathlib.Path.glob
doesn't.

ls -fr ~/git/marcel/{marcel,test} \
| select (f: f.suffix == '.py') \
| map (f: f.readlines()) \
| expand \
| red count
No qualifying paths: ['~/git/marcel/{marcel,test}']

----------------------------------------------------------------------

cat = [ map (f: (f, f.readlines())) | expand 1 ]
(cat)

prints:

    pipeline(map(f: (f, f.readlines())) | expand(1))

It would be nice to have the original source.

----------------------------------------------------------------------

These commands do different things:

    ls -fr **/*.py
    ls -fr | select (f: f.suffix == '.py')

The first one avoids symlinks (or symlinks to visited directories? or
files?). The second one explores both paths.

----------------------------------------------------------------------

I keep forgetting to set pipeline's error handler. Could be done by
Pipeline.copy.

----------------------------------------------------------------------

env has paths as strings. Should be Paths.

----------------------------------------------------------------------

ls API: Need to complain if depth is other than 0 or 1

----------------------------------------------------------------------

Exhaustive type error testing in API?

----------------------------------------------------------------------

stack traces: Include them, but have print_stack check a flag to
determine if they should really be printed.

----------------------------------------------------------------------

TestBase.reset_environment does too much. Move everything but Main
construction into subclasses.

----------------------------------------------------------------------

Controlling Popen processes:

https://pymotw.com/2/subprocess/#process-groups-sessions

----------------------------------------------------------------------

Pipelines:

- In parser, the create_op_variable check is useless. The variable
  value could change before execution, and may even cease to
  exist. Make create_op_variable the last resort, and then at runtime,
  complain if the var isn't defined, or if it's value is of the wrong
  type.

- Allow [...] to delimit a pipeline, even when not necessary. (Like {
  ... } around single statement if, in C.)


Should assign allow assignment of pipeline without brackets?

----------------------------------------------------------------------

Should a var hide an op by the same name?

----------------------------------------------------------------------

Oops, [] is overloaded:

M-0.9.17 jao@cheese:/tmp/csv$ ls [b-f]*.csv
Operator ls: filenames must be a string: [runpipeline(b-f)]

But escaping works:

M-0.10.6 jao@cheese:~$ ls \[p-r\]*
-rw-rw-r--   jao    jao       36883   2020 Jul 05 19:23:14   passwords.txt
-rw-r--r--   jao    jao       13377   2019 Jan 20 12:43:37   reality_distortion_field.md
-rw-rw-r--   jao    jao        2415   2019 Oct 06 23:13:49   reload.txt


----------------------------------------------------------------------

Can't run ssh!

----------------------------------------------------------------------

EDITOR set to host's EDITOR on startup. Which is convenient, but odd
if host value changes. How to keep the two in sync? Maybe reporting
EDITOR should always get the value of os.getenv('EDITOR')?

----------------------------------------------------------------------

Nushell uses $it for current pipeline item. Not a bad
idea. Alternative to args (without --all).

----------------------------------------------------------------------

Tab completion:

- We often know when an op ends. Can tab-complete for |, >, >>, [, ], Enter.

- We sometimes know when an arg is not a flag. Can prompt for var, (, [.

----------------------------------------------------------------------

Help needs to discuss >, >>, pipeline params.

help pipeline, examples summing filesizes are inconsistent. Unclear
that early ones compute local sum of sizes, and later ones are global.

----------------------------------------------------------------------

In api functions, why [None] instead of []? E.g., in store()

----------------------------------------------------------------------

Operator and pipeline logging, easily controllable, is needed. Can
this be done avoiding runtime penalty when logging not in use?

----------------------------------------------------------------------

Error handling needs to be revisited.

----------------------------------------------------------------------

ls abc.{x,y}

is not parsed properly, because the comma is its own token.

Could fix this by recognizing COMMA only in the right context. (Lexer
would need to know Parser state.)

OR: in the context that a comma is used, look for string instead, and
check that it is a comma.

----------------------------------------------------------------------

Arg checking (derived from bug 129):

Doing parse-time checking isn't sufficient. A check is also needed at
execution time, for args that need to be evaluated. The conversion
functions in ArgsParser (e.g. str_to_int) don't really allow for that
second use, as they are tied to the ArgsParser object, which isn't
available at runtime. They could *almost* be made independent of
ArgsParser, but there are some dependencies:

- self.op_name: op isn't available during arg parsing. 

- self.env

- self.current_op: For function(). Need to revisit error handling
  (which is why f.set_op(self.current_op) is called), and perhaps get
  rid of this call.

----------------------------------------------------------------------

Tab completion for env vars.

----------------------------------------------------------------------

Can threading/multiprocessing (for fork) be replaced by async io?

https://realpython.com/async-io-python/

And maybe for the bash op:

- create_subprocess_exec
- create_subprocess_shell

----------------------------------------------------------------------

Documentation for builtin functions

----------------------------------------------------------------------

Osh handled stdin:

    osh ^ ...

Need something like this for marcel.

The read op (without a FILENAME) assumes that inputs are File objects,
not a stream of text.

What about connecting stdin to input stream? If nothing shows up, no
harm. As long as we don't get stuck waiting forever.

----------------------------------------------------------------------

json

https://cameronnokes.com/blog/working-with-json-in-bash-using-jq/
