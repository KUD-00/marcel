Syntax:

    - Replace > by ~
    - Have > work more conventionally, as syntactic sugar for out -f.

PROBLEM: Lexer sees ~ and assumes it's a TILDE, even here:

    ls ~/foo*

Can't rely on / to disambiguate, e.g.

    ls ~ 

Disambiguating:

- ~ adjacent to string: Concatenate, the ~ is part of the string. (adjacent: touching)

- ~ followed by EOL: String

- ~ followed by |: String

- ~ followed by string: TILDE

  But

      ls ~ abc

  is ambiguous. Could mean list this directory and abc, or redirect ls contents to abc.

~ is just a bad choice for redirection.

Alternatives:

        ls ~> v
        ls ~>> v

        ls ~~ v
        ???

        
What about using ~~ for append? Delete the variable to start over. But
replacing var's value is probably the most common usage, so that gets
clunky -- have to delete and then store.

Fixing this:

       ls ~~ v       # overwrite
       ls ~~+ v      # append



     ls . v
     ls .. v
     v . select (...)

No, same problem as ~, overloaded.


ls > ./files.txt

./files.txt > out

./files.txt > ./files2.txt

......................................................................

> and >> are very much like ~~ and ~~+. 

Minor issue: Still not happy with the syntax. Ideally the latter
symbols would be ~ and ~~, but ~ can't be disambiguated (see above).

Bigger issue: 

- > is for text, like Linux, writing strings to a file. ~~ is for
streams, pickling the whole thing. So the difference between > and ~~
is really about format, text vs. pickling.

- ~~ works on vars or files, while > works just on files. 

- read has options for text (default), csv, tsv, pickle. out has
  options for csv, pickle.

Could regularize all of this:

- Have one set of redirection symbols, > and >>.

- Somehow indicate format (text stream, csv, tsv, pickle stream). Perhaps a format
  operator? But then what should the default be?

- Support reading from/writing to files or vars.

Example:

    gen 3 ~~ x
    x ~~

This has to know to write a pickled result to the var x, and then
unpickle. This formatting info is current implicit in the ~~ syntax.

And here:

    gen 3 > ./file.txt
    ./file.txt >

implies text stream.

What about this:

- Default is pickling for vars, text stream for files.

- format operator for when the defaults are not what's wanted.

But what about this:

    gen 3 > x
    x > ./file.txt

x is a var, so we assume pickling. ./file.txt is a file so we assume
text stream. The conversion is implied. Equivalent to (inventing some
flags):

    load --pickle x | out --text ./file.txt

Along these lines, and to clean things up, read/out, load/store should
be unified.

----------------------------------------------------------------------

Design, first attempt:

- Combine load and read -> in

- read has args for a few different purposes:

  - File traversal: -0, -1, --recursive
  - Format: --csv, --tsv, --pickle
  - Output: --label
  - filenames

  The format flags can be applied to vars also.

- Combine store and out -> out

- out (current version) has args for a few different purposes:

  - Target: stdout or file. File is implied by use of --append or
    --file flags, which must be followed by a filename arg.

  - Format: --csv, --pickle, FORMAT. If none of these are provided, do
    default rendering.

  Keep the format flags, and add --tsv. 

Var or file?

- var is a python identifier.

- file must begin with ., ~, or /. Could do more complex inference,
  e.g. file.txt is a file because . is not valid in a python
  identifier. But keep it simple. file.txt is not valid as either a
  var or a file. ./file.txt is a file.

- in VAR:

  - One var, no wildcards.
  - format flag

- in FILE:

  - Multiple filenames, wildcards, start with ., ~, or /.
  - format flag
  - traversal flags

- out (no filename or var)

  - write to stdout
  - format

- out VAR:

  - format. Maybe require --format flag. 
  - target

- out FILE:

  - format
  - target

Syntactic sugar:

    Syntax              Meaning

    ... > var           ... | out --pickle var


    ... > ./file        ... | out --text --file ./file

    var > ...           in --pickle var | ...

    ./file > ...        in --text --file ./file | ...

----------------------------------------------------------------------

4/13/23

Ambiguities in redirection syntax


Bug 199 has to do with confusion about redirection syntax.

    x = (| write -f '<<<{}>>>' |)
    gen 3 | x

Works, we see the formatted output.

Save the gen output:

    gen 3 > g
    g >

Stream g into pipeline:

    g > (*x: x) | x

works. But this:

    g > x

produces no output.

The problem is that there is that the parser has special handling of
"var > var", and there is no recognition of the fact that x is a
pipeline.

This can be handled. Detect what is bound to the tokens on either side
of >. So for

    a > b

- a is file: 

    - b is file: Copy contents of a into b. I.e., "a >" -> read a,
      while "> b" (the same >) -> write b. So equivalent to: 
      read a | write b.

    - b is pipeline: read a and stream into p. Equivalent to: 
      read a | b
  
- a is pipeline:

    - b is file: Equivalent to a | write b

    - b is pipeline: Illegal


And the reasoning is similar for >$ operating on vars instead of
files.

But what about: 

    file > var

    var > file

    file >$ var

    var >$ file

None of these are correct, due to the syntactic trick of binding the
redirect syntax (> or >$) twice, (left and right). I.e., "var >"
doesn't make sense because > requires a file.

......................................................................

To fix this:

- Get rid of "a > b" special syntax. 

- New special syntax:

    - a > >$ b: Copy file to var

    - a >$ > b: Copy var to file

BUT THE SYNTAX CAN'T BE REMOVED! Because pipeline > var is a
legitimate thing to do, for example.

x > y

- x is pipeline, y is var: x | write y

- x is var, y is pipeline: read x | y

So parsing can't decide what to do. 

    p = (| x > y |)

has different meanings depending on types of x and y.

Also, testing type of var is gross.

What about different syntax for reading and writing? E.g. < for read.

So:

- x | write y would be: x > y

- read x | y would be: x < y, which just looks weird and unlike what
  is actually happening. What about y < x? E.g.

     y < x | ...

  <x binds tightly to y, so it is equivalent to: read x | y | ...

  Bash-like.

......................................................................

What about this:

- a > means: read a

- a > b | ... means: read a | b | ...

- Copying done by a > > b. Translates to read a | write b

*** a > b is just ambiguous. Define it to mean: a | write b. To get
  read a | b, write it explicitly, avoid > syntax.

......................................................................

Decision:

    pipeline:
            op_sequence [arrow str]
            arrow str
            str arrow1 arrow str
            str arrow1 [op_sequence [arrow str]]
            str arrow str
            arrow str

store means either Write or Store, depending on the arrow, e.g. > or >$).
Similarly, read means either Read or Load.

- op_sequence [arrow str]
    Equivalent to: op_sequence | store str

- str arrow1 arrow str:
    Equivalent to: read str | write str

- str arrow1 [op_sequence [arrow str]]:
    Equivalent to: read str | [op_sequence [| store str]]

- str arrow str:
    Equivalent to: str | write str. The first str is the name of a var
    containing a pipeline.

- arrow str:
    Equivalent to: write str. Useful in a nested pipeline, e.g.
    ... | tee (| > x |) (| ... |)


Parsing cases

    str arrow
        str: str arrow str
        arrow str: str arrow arrow str
        end: str arrow1
        op_sequence
            end: str arrow op_sequence
            arrow str: str arrow op_sequence arrow str

    arrow str
        end: arrow str

    else (op_sequence [arrow str])

Doesn't work.

    ls > p

ls is an op, so it's equivalent to: ls | store p.

Or ls could be a file, so: read ls | p, where p is a pipeline var.

----------------------------------------------------------------------

I give up. Disambiguating > is just not working. Try this:

    > for write
    < for read

Pipeline grammar:

    lt: <
    gt1: >
    gt2: >>
    gt: 
        gt1
        gt2

    op_sequence [gt str]
    str lt gt str
    str lt [op_sequence [gt str]]


Examples:

op_sequence [gt str]

    ls > files.txt


lt str gt str

    source < > target

lt str [op_sequence [gt str]]

    x.csv < parse --csv | do | some | stuff > out.txt

    ... | join (| a < |) (| b < |)
